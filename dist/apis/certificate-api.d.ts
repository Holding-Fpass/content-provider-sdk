/**
 * Fpass Content API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CertificateType } from '../models';
import { Resource } from '../models';
/**
 * CertificateApi - axios parameter creator
 * @export
 */
export declare const CertificateApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gerar um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCertificate: (type: CertificateType, options?: any) => Promise<RequestArgs>;
    /**
     * Obter um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCertificate: (type: CertificateType, options?: any) => Promise<RequestArgs>;
};
/**
 * CertificateApi - functional programming interface
 * @export
 */
export declare const CertificateApiFp: (configuration?: Configuration) => {
    /**
     * Gerar um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCertificate(type: CertificateType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
    /**
     * Obter um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCertificate(type: CertificateType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>>;
};
/**
 * CertificateApi - factory interface
 * @export
 */
export declare const CertificateApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gerar um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCertificate(type: CertificateType, options?: any): AxiosPromise<Resource>;
    /**
     * Obter um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCertificate(type: CertificateType, options?: any): AxiosPromise<Resource>;
};
/**
 * CertificateApi - object-oriented interface
 * @export
 * @class CertificateApi
 * @extends {BaseAPI}
 */
export declare class CertificateApi extends BaseAPI {
    /**
     * Gerar um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    createCertificate(type: CertificateType, options?: any): Promise<import("axios").AxiosResponse<Resource>>;
    /**
     * Obter um certificado
     * @param {CertificateType} type Tipo de certificado a ser obtido
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    getCertificate(type: CertificateType, options?: any): Promise<import("axios").AxiosResponse<Resource>>;
}
